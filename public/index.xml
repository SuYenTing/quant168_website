<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>台股投資選股研究室 部落格 </title>
		<link>/</link>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<author>Quant168 智能投資研究團隊</author>
		<rights>Copyright (c) 2019</rights>
		<updated>2019-03-30 00:00:00 &#43;0000 UTC</updated>
		
		<item>
			<title>R語言平行運算介紹</title>
			<link>/post_learn/20190330_r_parallel_introduction/</link>
			<pubDate>Sat, 30 Mar 2019 00:00:00 UTC</pubDate>
			<author>Quant168 智能投資研究團隊</author>
			<guid>/post_learn/20190330_r_parallel_introduction/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="/img/unsplash-photos-4zxSWESyZio.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>


&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;在做量化投資策略參數最佳化時，都會透過&lt;code&gt;for&lt;/code&gt;迴圈的寫法來處理，但是如果策略很複雜時，每次迴圈跑得速度都會很慢。由於R程式是用單個執行緒在跑，因此要克服執行時間很久的問題，最簡單的方法就是在電腦上開很多個R程式一起跑。這樣就會用很多個執行緒在計算，此方法類似平行運算的概念，但這樣做實在是很麻煩。為解決這個問題，R程式裡面有一個套件&lt;code&gt;parallel&lt;/code&gt;，只要將要程式碼包裝成函數形式，就可以跑平行運算。&lt;/p&gt;
&lt;p&gt;接下來文章一開始會先用&lt;code&gt;for&lt;/code&gt;迴圈做一個簡單的範例，再來會使用&lt;code&gt;apply&lt;/code&gt;家族提升速度，最後用平行運算讓速度再往上提升。透過這個範例，可以看到如何使用平行運算及平行運算的速度。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;使用套件&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(parallel)    # 平行運算套件
library(tidyverse)   # 資料科學專用套件包&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;for&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;For迴圈寫法&lt;/h2&gt;
&lt;p&gt;我們做一個簡單的範例，產生1,000列的資料，每列為共包含兩個數，分別為該列的值及平方值。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;output &amp;lt;- NULL     # 建立儲存表
power &amp;lt;- 2         # 次方數
ptm &amp;lt;- proc.time() # 啟動計時器

for(ix in 1:1000){

  rowData &amp;lt;- tibble(num1 = ix, num2 = ix^power) 
  output &amp;lt;- output %&amp;gt;% bind_rows(rowData)
  
}

forTime &amp;lt;- proc.time() - ptm  # 結束計時器 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;執行完後，&lt;code&gt;output&lt;/code&gt;會是：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000 x 2
##     num1  num2
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1     1
##  2     2     4
##  3     3     9
##  4     4    16
##  5     5    25
##  6     6    36
##  7     7    49
##  8     8    64
##  9     9    81
## 10    10   100
## # ... with 990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;for&lt;/code&gt;迴圈的寫法，執行速度為0.89秒：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;forTime&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.89    0.00    0.89&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;apply&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Apply寫法&lt;/h2&gt;
&lt;p&gt;在R語言中，透過&lt;code&gt;apply&lt;/code&gt;家族的函數改寫&lt;code&gt;for&lt;/code&gt;迴圈寫法，可以提升速度。我們將原先問題改為&lt;code&gt;lapply&lt;/code&gt;寫法：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 將For迴圈內程式碼改為函數
GenerateData &amp;lt;- function(ix){
  rowData &amp;lt;- tibble(num1 = ix, num2 = ix^power) 
  return(rowData)
}

power &amp;lt;- 2          # 次方數
ptm &amp;lt;- proc.time()  # 啟動計時器

output &amp;lt;- lapply(c(1:1000), GenerateData)  # 執行lapply
output &amp;lt;- do.call(bind_rows, output)       # 整併資料

lapplyTime &amp;lt;- proc.time() - ptm  # 結束計時器 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lapplyTime&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.68    0.00    0.69&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在lapply的寫法，執行的速度為0.69秒，相較於For迴圈寫法，提升0.2秒。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;平行運算寫法&lt;/h2&gt;
&lt;p&gt;接下來就是進入本篇的重點平行運算寫法。&lt;/p&gt;
&lt;p&gt;首先我們先看電腦的執行緒有幾個，這部分每台電腦都會不一樣，以我的電腦為例，共有8個。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myCoreNums &amp;lt;- detectCores()
myCoreNums&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下來是設定待會跑程式時，要用多少的執行緒來協助我們。這邊建議執行緒&lt;strong&gt;最多&lt;/strong&gt;就設定電腦執行緒個數減1，為何要減1？主要是讓電腦有1個執行緒能夠維持電腦的基本運作。如果將所有執行緒拿來跑程式，電腦有時候就會直接掛掉黑屏給你看，用平行運算也是要很小心的。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl &amp;lt;- makeCluster(myCoreNums-1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;執行緒設定好後，下一個步驟是將函數內會用到的資料及套件部署到各個執行緒。這邊可以想像成我在每個執行緒中都開啟一個R程式，但這個R程式的變數區和套件都還沒被載入，所以我們要將資料及套件都傳進去執行緒內。&lt;/p&gt;
&lt;p&gt;以範例來說，函數內的&lt;code&gt;power&lt;/code&gt;變數並不是在&lt;code&gt;function&lt;/code&gt;內產生，所以就要&lt;code&gt;power&lt;/code&gt;變數部署進去。另外&lt;code&gt;function&lt;/code&gt;內有用到&lt;code&gt;tidyverse&lt;/code&gt;套件，也需要部署到執行緒內。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clusterExport(cl, c(&amp;quot;power&amp;quot;))               # 傳入變數
clusterEvalQ(cl, c(library(tidyverse)))     # 傳入套件&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此處做個補充，由於這是一個小小的範例，在這個範例內只需要部署到1個變數及1個套件就可以運作。但實際上常會需要部署很多變數及套件，寫法為：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clusterExport(cl, c(&amp;quot;variable1&amp;quot;, &amp;quot;variable2&amp;quot;, &amp;quot;variable3&amp;quot;))                      # 傳入變數
clusterEvalQ(cl, c(library(package1), library(package2), library(package3)))     # 傳入套件&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在部署完變數後，接下來就可以開始執行平行演算函數。其實很簡單，只要將&lt;code&gt;lapply&lt;/code&gt;函數改成&lt;code&gt;parLapply&lt;/code&gt;，第一個引數加入&lt;code&gt;cl&lt;/code&gt;即可。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ptm &amp;lt;- proc.time()  # 啟動計時器

output &amp;lt;- parLapply(cl, c(1:1000), GenerateData)   # 執行平行運算
output &amp;lt;- do.call(bind_rows, output)               # 整併資料

parLapplyTime &amp;lt;- proc.time() - ptm  # 結束計時器 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parLapplyTime&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##    0.02    0.00    0.21&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在平行運算的的寫法，執行的速度為0.21秒，比&lt;code&gt;for&lt;/code&gt;迴圈寫法快0.68秒，比&lt;code&gt;lapply&lt;/code&gt;的寫法快0.48秒。這僅僅是處理1,000筆資料的數據，當資料量大時，速度差異將會更大。&lt;/p&gt;
&lt;p&gt;在運作完平行運算後，要記得將平行運算關掉，不要浪費電腦效能&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stopCluster(cl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下為完整的平行運算範例程式碼：&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(parallel)    # 平行運算套件
library(tidyverse)   # 資料科學專用套件包

power &amp;lt;- 2 # 次方數

# 資料產生函數
GenerateData &amp;lt;- function(ix){
  rowData &amp;lt;- tibble(num1 = ix, num2 = ix^power) 
  return(rowData)
}

# 設定執行函數
myCoreNums &amp;lt;- detectCores()
cl &amp;lt;- makeCluster(myCoreNums-1)

# 部署變數及套件至執行緒
clusterExport(cl, c(&amp;quot;power&amp;quot;))               # 傳入變數
clusterEvalQ(cl, c(library(tidyverse)))     # 傳入套件

ptm &amp;lt;- proc.time()  # 啟動計時器

output &amp;lt;- parLapply(cl, c(1:1000), GenerateData)   # 執行平行運算
output &amp;lt;- do.call(bind_rows, output)               # 整併資料

parLapplyTime &amp;lt;- proc.time() - ptm  # 結束計時器 

stopCluster(cl) # 結束平行運算&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;結語&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;parallel&lt;/code&gt;套件能使用的函數不僅僅只有&lt;code&gt;parLapply&lt;/code&gt;，只要是&lt;code&gt;apply&lt;/code&gt;家族的函數皆可以使用，可以在Console輸入&lt;code&gt;?parLapply&lt;/code&gt;查詢。在寫程式時，我習慣在一開始都會先用&lt;code&gt;for&lt;/code&gt;迴圈去處理問題，觀看部分資料執行的狀況是否正確。確認無誤要開始跑全部資料時，將&lt;code&gt;for&lt;/code&gt;迴圈程式碼改成&lt;code&gt;function&lt;/code&gt;寫法，並搭配&lt;code&gt;apply&lt;/code&gt;家族函數，這樣就可以很輕易地再改寫成平行運算程式碼。目前用下來覺得平行運算套件真的是很方便，速度很快。但如果要說缺點的話，就是如果平行運算出錯時，很難去Debug，有時還是需要回到&lt;code&gt;for&lt;/code&gt;迴圈去尋找問題發生點。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;參考來源&lt;/h2&gt;
&lt;p&gt;當初是看這篇學會平行運算的寫法:&lt;a href=&#34;https://www.r-bloggers.com/how-to-go-parallel-in-r-basics-tips/&#34; class=&#34;uri&#34;&gt;https://www.r-bloggers.com/how-to-go-parallel-in-r-basics-tips/&lt;/a&gt;，裡面也有介紹其他R的平行演算套件，像是&lt;code&gt;foreach&lt;/code&gt;套件等，有興趣的話可以去看看。&lt;/p&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>運用效率前緣選出優勢股票(一)</title>
			<link>/post_strategy/20190312_dominate_efficient_frontier_strategy/</link>
			<pubDate>Tue, 12 Mar 2019 00:00:00 UTC</pubDate>
			<author>Quant168 智能投資研究團隊</author>
			<guid>/post_strategy/20190312_dominate_efficient_frontier_strategy/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="/img/unsplash-photos-5mZ_M06Fc9g.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;這次要和大家分享的是，以在學界知名的「效率前緣」為核心概念所建構的「優勢選股策略」， 核心概念是靠著觀察風險與報酬的關係，簡單選出高CP值的優良股票，不用再做額外的操作。 這樣簡單的策略，是否能獲得打贏大盤的績效呢?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;介紹效率前緣&lt;/h2&gt;
&lt;center&gt;
&lt;img src=&#34;/post_strategy/20190312_dominate_efficient_frontier_strategy/1.png&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;「效率前緣」是由學者Markowitz在1952年所提出的現代投資理論中的核心概念之一，該理論於1990年獲頒諾貝爾經濟學獎。 「效率前緣」是將市場上可供投資的所有資產，依任意比率組成投資組合後，選擇在相同風險下， 擁有最高期望報酬的那些投資組合共同於 期望報酬-風險 圖上描繪而成。簡單來說，雖然報酬一定伴隨風險，但選擇效率前緣上方的投資組合， 就是選擇了該風險水平下，預期報酬最高的投資組合。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;介紹優勢策略選股&lt;/h2&gt;
&lt;p&gt;本投資策略跟隨「效率前緣」的精神，尋找市場中「優勢」的股票，優勢定義為以下兩點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同期望報酬中，風險最低。&lt;/li&gt;
&lt;li&gt;相同風險下，期望報酬最高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以2018年12月份台股上市櫃股票為例，具有「效率前緣」概念的優勢股票即為紅點。 觀察可以看到所有的紅點都會是該風險值底下，期望報酬最高的股票，符合我們的要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post_strategy/20190312_dominate_efficient_frontier_strategy_files/figure-html/graph1-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:250px; overflow-x: scroll; width:100%; &#34;&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
編號
&lt;/th&gt;
&lt;th style=&#34;text-align:center;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
股票代碼
&lt;/th&gt;
&lt;th style=&#34;text-align:center;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
股票名稱
&lt;/th&gt;
&lt;th style=&#34;text-align:center;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
平均日報酬率
&lt;/th&gt;
&lt;th style=&#34;text-align:center;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
日標準差
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
1526
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
日馳
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.033
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.062
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2340
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
光磊
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.008
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.016
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2401
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
凌陽
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.008
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.015
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2404
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
漢唐
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.007
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.010
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2444
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
兆勁
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.018
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.031
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2845
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
遠東銀
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.002
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.007
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2880
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
華南金
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.001
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.005
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
2889
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
國票金
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.001
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.005
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
3036
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
文曄
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.001
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.007
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
4942
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
嘉彰
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.019
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.032
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
4960
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
誠美材
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.015
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.024
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
5299
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
杰力
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.026
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.042
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
5880
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
合庫金
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.001
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.006
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
6104
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
創惟
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.012
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.018
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
15
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
6116
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
彩晶
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.005
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.007
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
16
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
6180
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
橘子
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.012
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.023
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
17
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
6251
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
定穎
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.013
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.023
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
18
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
8039
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
台虹
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.008
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.017
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;策略績效回測&lt;/h2&gt;
&lt;p&gt;為觀察「優勢」策略選股是否有效，我們測試以台股上市櫃股票為標的，在每月初進選股，標準為依據每檔股票前一個月的平均報酬率及標準差，選出優勢股票建立投資組合。此外，為保證實務上的可行性，本投組僅考慮前一個月平均每日交易量一千張以上的股票，並考慮交易手續費買賣各0.2%。績效如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post_strategy/20190312_dominate_efficient_frontier_strategy_files/figure-html/graph2-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
情境
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
累積報酬
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
年化報酬率
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
年化風險
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
夏普比率
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
選股勝率
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
優勢策略
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.897
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.180
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.191
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.882
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.563
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
大盤
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.237
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.056
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.136
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
0.338
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結果顯示本策略在2015~2018共四年的回測期間內，優勢策略選股的累積報酬率為89%(年化17%)， 夏普比率0.88，績效勝於同期間的大盤(累計報酬23%，年化5.6%，夏普比率0.34)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;每期投資檔數&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post_strategy/20190312_dominate_efficient_frontier_strategy_files/figure-html/graph3-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;table class=&#34;table table-striped&#34; style=&#34;width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
平均投資檔數
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
單期最小投資股票數
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
單期最大投資股票數
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
15.94
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
27
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;本策略會建議投資人以建構約16檔股票投資組合之方式進行投資，目的是分散掉個別股票突發事件造成的個別風險。但值得注意的是，上方的績效表顯示，優勢選股策略選到隔月上漲股票的機率為56%，這表示依照本策略推薦的投資清單，就算只買進其中一檔股票，也僅進行一個月的投資，還是有較高的機率可以獲利的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;熱門股&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post_strategy/20190312_dominate_efficient_frontier_strategy_files/figure-html/graph4-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;觀察回測期間內最常被選到的十檔股票可以發現金融股及電信股很受本策略的歡迎， 可以歸功於其風險較低的特性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;後續延伸&lt;/h2&gt;
&lt;p&gt;眼尖的讀者一定有發現到，優勢選股策略績效雖然看起來很棒，但在2018下半年，市場步入空頭，策略投組的跌幅其實是遠高於大盤的，可以說是有點吃老本的狀態。我們將上述狀況以估計投組未來可能最大損失的「最大回撤」圖形表示如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post_strategy/20190312_dominate_efficient_frontier_strategy_files/figure-html/graph5-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到優勢選股策略選出的投資組合，在高報酬的狀態下，確實也承受了高於大盤的風險，這樣的波動絕對是大家不樂見的。讀者可以想想，是否有能在賺取高獲利同時，降低波動的辦法，答案將在後續的文章中，為各位帶來精闢的解析。&lt;/p&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>機器學習與統計模型之差異</title>
			<link>/post_learn/20190218_differences_between_machine_learning_and_statistical_models/</link>
			<pubDate>Mon, 25 Feb 2019 00:00:00 UTC</pubDate>
			<author>Quant168 智能投資研究團隊</author>
			<guid>/post_learn/20190218_differences_between_machine_learning_and_statistical_models/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="/img/unsplash-photos-TzMi5Ov7QeM.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>


&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;統計模型定義&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;統計模型係為「以數據為基礎，使用數學方程式的形式表現變量之間的關係。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;機器學習與統計模型之相異之處&lt;/h2&gt;
&lt;p&gt;在接觸到機器學習的領域時，許多人一定有個疑問：機器學習是不是就等同於統計模型？在回答這個問題之前，我們應該都能理解一點，當處理的問題是與數據息息相關，無論使用何種工具來分析，最後的目標都是從數據當中挖掘潛在的知識與訊息。故對於機器學習與統計模型來說，都是藉由資料分析，獲得背後隱藏的訊息。回歸到機器學習與統計模型的差異，先從其定義說起：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;機器學習是「以一種不仰賴規則而設計的數據學習之演算法。」&lt;/p&gt;
&lt;p&gt;統計模型是「以數學方程式的模式，以表達變量之間的關係。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;統計模型的發展，早於1749年開始，距今已270年歷史之久，當時，統計學被研究人員廣泛地運用在表達國際的經濟水準，以及作為軍事用途，爾後，統計學才逐漸被充分地使用在數據的分析。機器學習作為人工智慧(1940)的分支，自從1946年才開始起步，它的目標在於電腦可進行自我的學習來對目標取得解答。然而，對於統計學家而言，他們所關心的是模型所具有的「解釋能力」，也同時注重建構模型與解釋統計模型時所作的假設與嚴謹程度；反觀，機器學習學者則更關心模型的「預測能力」。舉個例子而言，對於明天會不會下雨的這件事，機器學習會表述說：「預測明天下雨的機率為60%」，但統計學家則會給予一個預測區間：「有95%的信心水準下，明天下雨的機率會落在50%到70%之間。」&lt;/p&gt;
&lt;p&gt;以下將從不同的層面，來說明機器學習與統計模型的不同之處：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 運作概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機器學習：為資訊科學與人工智慧的一分支，透過數據學習以建構分析系統，並不仰賴明確的建構規則。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;統計模型：為數學的一分支。透過數據發現各變量之間的關係，給予一個預測的結果。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 歷史發展&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機器學習：因計算能力以及資料蒐集的進步，加速了機器學習的發展。因數據規模以及複雜程度不斷攀升，故機器學習不斷展現出巨大的發展空間與潛力。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;統計模型：距今已有幾世紀之久，如同前段所言。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 模型假設&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機器學習：擺脫過多假設的侷限。不需假設自變量或應變量的分布。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;統計模型：仰賴一系列的假設。舉例而言，對於迴歸模型，有觀測樣本獨立、同變異數、波動期望值為零等的假設&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 數據處理能力&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機器學習：可被廣泛地運用，並可學習大數據，並進行預測和持續學習。處理數據的深度與廣度極大。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;統計模型：一般應用在較小的數據量和較窄的數據屬性。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. 預測方式與目標導向&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;機器學習：因機器學習不依賴假設，預測效果往往不錯。然而，其目標是建構一個高效並可靠的系統，持續穩定地預測未來的事件。例如：辨識圖像。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;統計模型：大多仰賴參數的估計，並傾向建構模型，瞭解變量之間所具有的關係。透過如此一來，模型可提供一個可信的預測區間。但因現實層面的複雜，往往不知道現實事件的輪廓與模樣，導致建構統計模型常備受挑戰，難以建構。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;總歸而言，統計學習的發展的確啟發了機器學習，而這幾年以來，機器學習會迅速的竄升也歸功於訓練數據量的能力大幅提升以及運算能力的可觀進步，故應可知道，統計理論並無本質上地突破，而是拜處理資料能力所賜。&lt;/p&gt;
&lt;p&gt;不過，統計學與機器學習仍然是高度相關的領域，若沒有彼此與其他領域的幫助與發展，它們仍然難以存在，也難以單獨生存。可預期的是，雖然機器學習和統計模型屬於不同分支，但經過長時間的發展後，兩者的差異有逐漸縮小的趨勢。&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kknews.cc/tech/gz22r3y.html&#34;&gt;《機器學習vs統計模型》&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>機器學習簡介─機器學習能夠解決哪些問題？</title>
			<link>/post_learn/20190211_what_problems_can_machine_learning_solve/</link>
			<pubDate>Mon, 18 Feb 2019 00:00:00 UTC</pubDate>
			<author>Quant168 智能投資研究團隊</author>
			<guid>/post_learn/20190211_what_problems_can_machine_learning_solve/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="/img/unsplash-photos-nehfi_SfqtU.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>


&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;機器學習定義&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;機器學習係為「能讓機器能夠自主學習並增強的演算法。其屬於人工智慧發展的一環。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;機器學習之學習方式&lt;/h2&gt;
&lt;p&gt;在機器學習中，演算法通常隱含著電腦運作的邏輯與思路，故通常負責了資訊科學中最難解釋的部分。然而，機器學習能夠解決多少問題，則取決於演算法的發展，以下將介紹其發展領域，包含「監督式學習」、「非監督式學習」、以及「強化式學習」三個部分。&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;監督式學習&lt;/h2&gt;
&lt;p&gt;監督式學習主要能處理的問題有：&lt;strong&gt;分類問題&lt;/strong&gt;、&lt;strong&gt;偵測異狀&lt;/strong&gt;、以及&lt;strong&gt;提供迴歸演算法&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;分類問題&lt;/h3&gt;
&lt;p&gt;分類問題亦可分成「二元分類問題」及「多元分類問題」。&lt;/p&gt;
&lt;p&gt;二元分類，顧名思義，此種演算法是用於解決「只有兩種結果」的問題。例如：是或否、開或關、買或不買、抽菸或不抽菸等。很多資料科學中的問題都是屬於二元分類，或者能夠被轉換成二元分類的問題。以下為例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這位顧客會不會續約？&lt;/li&gt;
&lt;li&gt;這張照片是不是一隻貓？&lt;/li&gt;
&lt;li&gt;每一件商品打八折或者第二件商品打五折，哪種促銷手法更能吸引顧客？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而多元分類問題，則可利用此演算法解決多種回答的問題。以下為例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這是何種動物的圖片？&lt;/li&gt;
&lt;li&gt;這篇新聞標題要如何下？&lt;/li&gt;
&lt;li&gt;這篇Facebook所包含的情緒為何？&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;偵測異狀&lt;/h3&gt;
&lt;p&gt;對於不正常的資料，需要更謹慎的監測與辨別。或許這種方法相當類似二元分類法，因為感覺其原理皆是在判別有或沒有異狀。不過這兩者的區別是在於二元分類中的資料中包含兩種回答。但偵測異狀則不一定。當分析的情況發生率很低，導致樣本數很少的時候，異狀偵測就顯得相當有用。以下為例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這張信用卡有被盜刷？&lt;/li&gt;
&lt;li&gt;這位使用者在這次消費和過去的消費行為落差很大嗎？&lt;/li&gt;
&lt;li&gt;這些用電量在這個季節和時間算是正常的嗎？&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;提供迴歸演算法&lt;/h3&gt;
&lt;p&gt;當欲解決的問題涉及數字而非分類的時候可使用。一般而言，迴歸演算法會給予一個實數解，可以是很精密的小數實數解、也可能為負數解。若問題特定限制為「有幾個」的問題，則負數解可能被直接視為零，而分數解則會依四捨五入方法轉換成最接近的整數。以下為例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下周二的氣溫如何？&lt;/li&gt;
&lt;li&gt;風力發電廠經過三十分鐘後，會有多少千瓦的需求？&lt;/li&gt;
&lt;li&gt;下周這位Twitter發言者會獲得多少新的追蹤者？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些問題看起來似乎是多元分類問題，但其實更適合用迴歸方式解決。例如：「讀者對於哪則新聞最感興趣？」乍看之下是個分類問題，但如果將問題轉換成「對於讀者而言，每則的新聞的有趣程度如何」並為每則新聞做評分，接下來只要選取分數最高的新聞即可。這類的問題通常和排名或對比有相關。相同道理，「我的車隊中，哪一輛最需要保養？」可以換成「這些車輛中，每台車需要保養的程度如何？」；「哪些顧客明年會跳槽到其他公司的產品」也可以轉換成「每名客戶隔年會跳槽到其他公司的產品的機率為何？」&lt;/p&gt;
&lt;p&gt;然而，二元分類問題是可以轉換成迴歸的問題。事實上，如果探究其原理，某些演算法的確會先將二元分類問題直接轉成迴歸的問題來解決。這種做法在二分法下不盡完美、或兩種都可能的情況下特別有用。舉例而言，當回答「有一部分是、而另一部分不是」或是「有可能開、也有可能關」的時候，迴歸演算法可以反映這些特性。這類問題通常會以「有多少可能性」或「有多少比例」的機率式問法開頭。以下為例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這位使用者有多大機會會點進這則廣告？&lt;/li&gt;
&lt;li&gt;這名員工有多大機會造成公司內部安全的風險？&lt;/li&gt;
&lt;li&gt;今天的航班，有多少比例會準時抵達？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此發現，二元分類、多元分類、異狀偵測以及迴歸等四種演算法關係匪淺，因為它們皆是監督式學習(supervised learning)演算法，而有共通之處。監督式演算法，在建立模型的時候都用了一組包含回答的資料(此過程稱之為訓練，Training)，並被用來分類或預測一組不包含回答的資料(此過程稱之為評分，Scoring)。除此之外，另外一些不同的資料科學的問題，則屬於非監督式和強化式學習(unsupervised and reinforcement learning)類別的處理範疇。&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;非監督式學習&lt;/h2&gt;
&lt;p&gt;非監督式學習注重在：「&lt;strong&gt;資料的組成為何？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;這類與資料組成相關的問題屬於「非監督式學習」。判斷資料結構的方法有很多。其中一種稱之聚類法(Clustering)，包含資料群集(Chunking)、分組(Grouping)、聚束(Bunching)、分段(Segmentation)等。這些方法目的是將資料分成幾個直觀的群體。不同於監督式學習，聚類法所分析的資料不包含任何用來引導分群、說明分群意義和數量的數字或名字。如果說，監督式學習是用來在星空中找出幾個特定的星球，聚類法則是用來圈出星空中的星座。由於聚類法可以用來將資料分成「幾叢」群體，分析人員可以更輕易地解讀和解釋資料。&lt;/p&gt;
&lt;p&gt;聚類法的基礎為衡量資料之間的距離或是相似程度，也就是距離度量(Distance metric)。距離度量可以是任何可測量的數據，例如智商之間的差距、相同基因組的數量、或是兩點之間的最短距離。和聚類法相關的問題全都試著將資料分成均等的群體。以下用幾種例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些消費者對於手機有相似的品味？&lt;/li&gt;
&lt;li&gt;哪些觀眾喜歡同一類型的電影？&lt;/li&gt;
&lt;li&gt;哪些型號的印表機有相似的故障？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非監督式學系下還有另一類的演算法稱之為降低維度法(dimensionality reduction)。降維是另一種簡化資料的方法，它可以讓資料的溝通變得更容易、處裡變得更快、而且存取變得更簡單。&lt;/p&gt;
&lt;p&gt;等第積分平均(GPA)是一個很簡單的例子。對於每位大學生，學術能力評估都是由四年內眾多的課程和考試所組成，但如果它們全部表列出來，沒有任何一位面試官可以吸收如此龐大的資訊。透過計算平均，可以將這些課堂和考試簡化成GPA。因為在某門課表現優異的學生，通常在其他課程的表現也不錯，所以這套方法還算能用。只是GPA的使用並非能夠完整呈現成績，的確會喪失一些資料，例如看不出一位學生的數學程度和英文程度之間的關係，或是相較考試之下是否這位學生更善於回家做作業；不過這樣的系統化作法，最大的好處就是能夠簡化，讓表達和比較學術能力的方式更加簡便。如果當問題的目標是總結、簡化、壓縮或是精粹資料，則聚類法則是理想的作法。&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;強化式學習&lt;/h2&gt;
&lt;p&gt;強化式學習注重在：「&lt;strong&gt;接下來該做什麼？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;這類的演算法和行動有關，和監督式與非監督式不一樣。舉例而言，迴歸演算法雖然可以用來預測明天的最高溫度為攝氏三十度，但它卻不能用來判斷該做什麼；強化演算法則可以用來判斷該採取的行動，例如趁天氣還沒過熱之前，先啟動辦公大樓之冷氣。強化演算法源自於大腦對於懲罰或獎勵的反應機制。這些演算法會傾力選出獎勵最高的選項，所以使用者必須提供一組行動選項，並告訴演算法哪些選項好、一般、或很差的行動。&lt;/p&gt;
&lt;p&gt;一般而言，強化演算法很適合用於需要在無人監督的情況之下，完成許多簡單決策自動化的系統。例如電梯、電熱器、冷氣或照明系統。由於強化學習最初被開發的目的是要操縱機器人，任何自動物件也能使用這套演算法。像是偵查用無人機或掃地機器人。以下用幾種例子說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;應該要將現在冷氣的溫度調高或調低，還是維持現狀？&lt;/li&gt;
&lt;li&gt;該再掃一次客廳還是繼續充電？&lt;/li&gt;
&lt;li&gt;該買入多少股票？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比起其他演算法，強化學習演算法通常需要更多時間，因為它和整個系統的整合更密切。這樣的好處是大多數的強化學習可以在沒有資料的情況開始分析，這些演算法會蒐集系統所產生的資料，並從錯誤中不斷學習。&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://brohrer.github.io/five_questions_data_science_answers.html&#34;&gt;Five Questions Data Science Answers, Brandon Rohrer’s Blog&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>量化投資簡介</title>
			<link>/post_learn/20190204_quantitative_investment_profile/</link>
			<pubDate>Mon, 04 Feb 2019 00:00:00 UTC</pubDate>
			<author>Quant168 智能投資研究團隊</author>
			<guid>/post_learn/20190204_quantitative_investment_profile/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="/img/unsplash-photos-vHnVtLK8rCc.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;量化投資是指「以量化的手段，藉由電腦程序化給予買賣交易訊號的一種投資方式。其目的在於獲取穩定的報酬率。」&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;量化投資的概念與發展&lt;/h3&gt;
&lt;p&gt;股票的發行，起源於十七世紀的荷蘭東印度公司，但量化投資的方式，卻是在1980年代才崛起，這一切得歸功於電腦科技的發展。量化投資是藉由數學模型的判斷下，給予交易有價證券的訊號。然而，這些數學模型並非無中生有，而是學者們觀察到市場與經濟的規律及模式，並以歷史的數據做為驗證，最終將其編譯成電腦的交易策略。而通常這種投資方式，皆為演算法的判斷，較無人為的介入以影響投資決策。&lt;/p&gt;
&lt;p&gt;因此，量化投資出現的主因，除了電腦技術的發展與普及，還包含了現代金融理論的發展、以及交易成本的降低。以下將說明這三項推動量化投資發展的因素：&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;電腦技術的發展與普及&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1976年由Steve Jobs和Stephen Gary Wozniak創辦蘋果電腦公司，可說是電腦的新紀元，在短短的數十年間，電腦的普及大量進入社會，改變人類的生活模式。Intel的創辦人之一Gordon Earle Moore曾提出莫爾定律，其推測電腦硬體的功能，包含處理速度以及儲存的能力，每隔一到兩年即會提升一倍。然而在大數據時代的來臨，人類對於電腦的仰賴已經遍及各領域，不只家庭、學校、企業、甚至是政府單位，都需要以數據的分析做為致勝的關鍵。&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;現代金融理論的發展&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;傳統的金融理論是建立在現金流貼現法。企業如果要計算其整體的價值，須將股票以及債券部位的價值做定價。然而這樣的定價方式，需對於未來的現金流以及折現率有所預測與假設，這種方式涉及許多主觀的判斷，一般而言，要準確的推測是相當有難度的。到了1960年代後期，CAPM (資本資產定價模型)由美國財務學家Sharpe等人發展出來，此說明在資本市場處於均衡狀態之下，資產所具有的風險及預期的收益率之間有了明確的關係。換句話說，根據CAPM的精髓，一個股票的預期收益率，可取決於其和市場的相關性(Beta值)以及無風險利率，這樣一來，投資者可不用對於現金流做複雜的預測，就可以推算出股票的價值。另外，在1950年代，Harry Markowitz提出以均值方差的方式，以優化投資組合。通常在考量最佳的股票投資組合，並不單以最大化投資報酬率為目標，同時還得考量其風險程度。同時，股票之間也具有相關性，也必須被考量進去。然而這些現代金融理論的發展，並不保證一定優於傳統的理論，而是提供更多的方式以補捉金融市場的樣態。&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;交易成本的降低&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;金融市場競爭激烈的狀況下，交易成本預期地將逐漸降低。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;量化投資導入市場的影響&lt;/h3&gt;
&lt;p&gt;就已發展的市場而言，量化交易佔有相當重要的地位。在許多的交易所，高頻量化基金的交易量能高達總交易量的30至40%。高頻的交易主要提供的是短期的流動性，相較之下，中長期的流動性則由較低頻的量化基金所提供。量化交易的特性通常是一次性地交易上百上千的股票，所以單一股票的走勢對於其影響並不重大，另外加上量化投資是以財務與數學的基礎下所建立的模型，並無主觀因素的參雜下，較少有捲入內線交易的醜聞，所以通常量化投資在運作上是在法規上最為放心的策略。同時，因量化投資需財務與數學模型的背景，也提供市場上相關背景的就業機會。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;參考資料來源&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://wallstreetcn.com/articles/250644&#34;&gt;華爾街見聞─量化投資必讀：剖析全球量化投資30年來的發展脈絡&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
		</item>
		
		<item>
			<title>如何做回溯測試?</title>
			<link>/post_learn/20190123_how_to_backtesting/</link>
			<pubDate>Wed, 23 Jan 2019 00:00:00 UTC</pubDate>
			<author>Quant168 智能投資研究團隊</author>
			<guid>/post_learn/20190123_how_to_backtesting/</guid>
			<media:content xmlns:media="http://search.yahoo.com/mrss/" url="/img/unsplash-photos-QRkew0KwXSM.tn-500x500.jpg" medium="image" type="image/jpg" width="100" height="100" />
			<description>


&lt;p&gt;多數人面對一個陌生的投資標的時，參考或仿效過往的成功做法，往往會是一個較有安全感，且似乎風險較低的選擇。&lt;/p&gt;
&lt;div class=&#34;section level1&#34;&gt;
&lt;h1&gt;回溯測試定義&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;回溯測試的概念，就是鑑往知來，藉由模擬過去某時期的投資策略，去操作現在的 投資，而從過去所累積至今的績效報酬，就成為此投資策略的戰績，並作為未來投資的參考依據，它也是投資常見的方法——「＃量化投資」的核心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下圖為例，小明現在想測試一個投資策略，它的策略做法為月營收發布日隔天(起始日:2001/01/11)挑選月營收排名前五名之股票，將投資組合持有一個月，並於下一次月營收發布日隔天(i.e. 2001/02/11)重新使用月營收挑選股票，重複上述流程操作至今，並將各期間報酬進行統計分析，便可知道其回測績效為何。&lt;/p&gt;
&lt;p&gt;需要特別注意的是，雖然過去的每個選股時間點我們都會知道未來的數據走勢(因為是歷史數據)，但在回朔測試時，我們會假設不知道未來數據的情況下去挑選股票，否則回測的績效結果就不具客觀參考性。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/post_learn/20190123_how_to_backtesting/1.png&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;下圖為例，小明現在想測試一個投資策略，它的策略做法為月營收發布日隔天(起始日:2001/01/11)挑選月營收排名前五名之股票，將投資組合持有一個月，並於下一次月營收發布日隔天(i.e. 2001/02/11)重新使用月營收挑選股票，重複上述流程操作至今，並將各期間報酬進行統計分析，便可知道其回測績效為何。&lt;/p&gt;
&lt;div class=&#34;section level3&#34;&gt;
&lt;h3&gt;過去戰功彪炳，代表未來也會持續戰勝?&lt;/h3&gt;
&lt;p&gt;很多投資人對於透過回測來驗證投資策略都抱持著存疑的態度，因為他們認為過去表現好的投資策略，並不表示未來採用此投資策略就會獲利。&lt;/p&gt;
&lt;p&gt;這是個合理的懷疑。但大家或許也可以換個思維想想，如果這個投資策略連在過去都無法創造好的績效，我們如何能期待它未來能獲利?就像在戰場上，我們派出的武將都是看它過去所立下的戰功，但這並不代表它一定會打勝仗，只是打勝仗的機率會比戰績差的武將來的高上許多。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/post_learn/20190123_how_to_backtesting/2.jpg&#34; /&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
		</item>
		
	</channel>
</rss>
